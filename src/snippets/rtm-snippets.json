{
	// =====================
	// Instruction Snippets
	// =====================
	"Call Method": {
		"scope": "scope.rtm",
		"prefix": "CALL_METHOD",
		"body": "CALL_METHOD Address(\"$1\") \"${2:Method Name}\" \"${3:args}\";",
		"description": "Calls a method on a component."
	},
	"Call Function": {
		"scope": "scope.rtm",
		"prefix": "CALL_FUNCTION",
		"body": "CALL_FUNCTION Address(\"$1\") \"${2:Blueprint Name}\" \"${3:Function Name}\" \"${4:args}\";",
		"description": "Calls a function on a blueprint."
	},
	"Take From Worktop": {
		"scope": "scope.rtm",
		"prefix": "TAKE_FROM_WORKTOP",
		"body": "TAKE_FROM_WORKTOP Address(\"$1\") Bucket(\"${2:Bucket Name}\");",
		"description": "Takes resources from the worktop and into a bucket."
	},
	"Take From Worktop by Amount": {
		"scope": "scope.rtm",
		"prefix": "TAKE_FROM_WORKTOP_BY_AMOUNT",
		"body": "TAKE_FROM_WORKTOP_BY_AMOUNT Decimal(\"${1:Amount}\") Address(\"$2\") Bucket(\"${3:Bucket Name}\");",
		"description": "Takes resources from the worktop and into a bucket."
	},
	"Take From Worktop by Ids": {
		"scope": "scope.rtm",
		"prefix": "TAKE_FROM_WORKTOP_BY_IDS",
		"body": "TAKE_FROM_WORKTOP_BY_IDS Set<NonFungibleId>(NonFungibleId(\"${1:id}\")) Address(\"$2\") Bucket(\"${3:Bucket Name}\");",
		"description": "Takes resources from the worktop and into a bucket."
	},
	"Return to Worktop": {
		"scope": "scope.rtm",
		"prefix": "RETURN_TO_WORKTOP",
		"body": "RETURN_TO_WORKTOP Bucket(\"${1:Bucket Name}\");",
		"description": "Returns a bucket to the transaction worktop."
	},
	"Assert Worktop Contains": {
		"scope": "scope.rtm",
		"prefix": "ASSERT_WORKTOP_CONTAINS",
		"body": "ASSERT_WORKTOP_CONTAINS Address(\"$1\");",
		"description": "Asserts that the transaction worktop contains some resource."
	},
	"Assert Worktop Contains by Amount": {
		"scope": "scope.rtm",
		"prefix": "ASSERT_WORKTOP_CONTAINS_BY_AMOUNT",
		"body": "ASSERT_WORKTOP_CONTAINS_BY_AMOUNT Decimal(\"${1:Amount}\") Address(\"$2\");",
		"description": "Asserts that the transaction worktop contains some resource."
	},
	"Assert Worktop Contains by Ids": {
		"scope": "scope.rtm",
		"prefix": "ASSERT_WORKTOP_CONTAINS_BY_IDS",
		"body": "ASSERT_WORKTOP_CONTAINS_BY_IDS Set<NonFungibleId>(NonFungibleId(\"${1:id}\")) Address(\"$2\");",
		"description": "Asserts that the transaction worktop contains some resource."
	},
	"Pop from Auth Zone": {
		"scope": "scope.rtm",
		"prefix": "POP_FROM_AUTH_ZONE",
		"body": "POP_FROM_AUTH_ZONE Proof(\"${1:Proof Name}\");",
		"description": "Pops a proof from the Auth Zone."
	},
	"Push to Auth Zone": {
		"scope": "scope.rtm",
		"prefix": "PUSH_TO_AUTH_ZONE",
		"body": "PUSH_TO_AUTH_ZONE Proof(\"${1:Proof Name}\");",
		"description": "Pushes a proof to the auth zone."
	},
	"Create Proof from Auth Zone": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_FROM_AUTH_ZONE",
		"body": "CREATE_PROOF_FROM_AUTH_ZONE Address(\"$1\") Proof(\"${2:Proof Name}\");",
		"description": "Creates a proof from the Auth Zone."
	},
	"Create Proof from Auth Zone by Amount": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT",
		"body": "CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT Decimal(\"${1:Amount}\") Address(\"$2\") Proof(\"${3:Proof Name}\");",
		"description": "Creates a proof from the Auth Zone."
	},
	"Create Proof from Auth Zone by Ids": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS",
		"body": "CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS Set<NonFungibleId>(NonFungibleId(\"${1:id}\")) Address(\"$2\") Proof(\"${3:Proof Name}\");",
		"description": "Creates a proof from the Auth Zone."
	},
	"Create Proof from Bucket": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_FROM_BUCKET",
		"body": "CREATE_PROOF_FROM_BUCKET Bucket(\"${1:Bucket Name}\") Proof(\"${2:Proof Name}\");",
		"description": "Creates a proof from Bucket."
	},
	"Clone Proof": {
		"scope": "scope.rtm",
		"prefix": "CLONE_PROOF",
		"body": "CLONE_PROOF Proof(\"${1:Original Proof Name}\") Proof(\"${2:New Proof Name}\");",
		"description": "Clones an existing proof."
	},
	"Drop Proof": {
		"scope": "scope.rtm",
		"prefix": "DROP_PROOF",
		"body": "DROP_PROOF Proof(\"${1:Proof Name}\");",
		"description": "Drops a Proof."
	},
	"Drop All Proof": {
		"scope": "scope.rtm",
		"prefix": "DROP_ALL_PROOF",
		"body": "DROP_ALL_PROOF;",
		"description": "Drops all Proofs."
	},
	"Clear Auth Zone": {
		"scope": "scope.rtm",
		"prefix": "CLEAR_AUTH_ZONE",
		"body": "CLEAR_AUTH_ZONE;",
		"description": "Drops all proofs from the Auth Zone."
	},
	"Publish Package with Owner": {
		"scope": "scope.rtm",
		"prefix": "PUBLISH_PACKAGE_WITH_OWNER",
		"body": "PUBLISH_PACKAGE_WITH_OWNER Blob(\"${1:Package WASM Blob}\") Blob(\"${2:Package ABI Blob}\") NonFungibleAddress(\"${3:Owner Resource Address}\", ${4:Owner Non-Fungible Id);",
		"description": "Publishes a package."
	},
	"Mint Fungible": {
		"scope": "scope.rtm",
		"prefix": "MINT_FUNGIBLE",
		"body": "MINT_FUNGIBLE Address(\"${1:Resource Address}\") Decimal(\"${2:Amount}\");",
		"description": "Mints a fungible token."
	},
	"Burn Bucket": {
		"scope": "scope.rtm",
		"prefix": "BURN_BUCKET",
		"body": "BURN_BUCKET Bucket(\"${1:Bucket Name}\");",
		"description": "Burns a Bucket."
	},
	"Create Resource": {
		"scope": "scope.rtm",
		"prefix": "CREATE_RESOURCE",
		"body": "CREATE_RESOURCE Enum(\"Fungible\", ${1:Token Divisibility}u8) Map<String, String>(String(\"name\"), String(\"${2:Token Name}\")) Map<Enum, Tuple>(Enum(\"Withdraw\"), Tuple(Enum(\"AllowAll\"), Enum(\"LOCKED\"))) Some(Enum(\"Fungible\", Decimal(\"${3:Initial Supply}\")))",
		"description": "Creates a new resource."
	},
	// ==================
	// Common Operations
	// ==================
	"Lock Fee": {
		"scope": "scope.rtm",
		"prefix": "LOCK_FEE",
		"body": "CALL_METHOD Address(\"${1:Account Component}\") \"lock_fee\" Decimal(\"${2:Fee to Lock}\");",
		"description": "Locks a fee for the transaction."
	},
	"Withdraw from Account": {
		"scope": "scope.rtm",
		"prefix": "WITHDRAW_FROM_ACCOUNT",
		"body": "CALL_METHOD Address(\"${1:Account Component}\") \"withdraw\" Address(\"${2:Resource to Withdraw}\") Decimal(\"${3:Amount}\"));",
		"description": "Withdraws funds from an account."
	},
	"Withdraw Non Fungibles from Account by Ids": {
		"scope": "scope.rtm",
		"prefix": "WITHDRAW_NON_FUNGIBLES_FROM_ACCOUNT",
		"body": "CALL_METHOD Address(\"${1:Account Component}\") \"withdraw_non_fungibles\" Address(\"${2:Resource to Withdraw}\") Array<NonFungibleLocalId>(NonFungibleLocalId(\"${3:id}\"));",
		"description": "Withdraws funds from an account."
	},
	"Create Proof of Amount from Account": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_OF_AMOUNT_FROM_ACCOUNT",
		"body": "CALL_METHOD Address(\"${1:account_component_address}\") \"create_proof_of_amount\" Address(\"${2:resource_address}\") Decimal(\"${3:amount}\");",
		"description": "Creates a proof from an account."
	},
	"Create Proof of Non Fungibles from Account": {
		"scope": "scope.rtm",
		"prefix": "CREATE_PROOF_OF_NON_FUNGIBLES_FROM_ACCOUNT",
		"body": "CALL_METHOD Address(\"${1:account_component_address}\") \"create_proof_of_non_fungibles\" Address(\"${2:resource_address}\") Array<NonFungibleLocalId>(NonFungibleLocalId(\"${3:some_non_fungible_local_id}\"));",
		"description": "Creates a proof of non fungibles from an account."
	},
	// =============
	// Common Types
	// =============
	"Blob": {
		"scope": "scope.rtm",
		"prefix": "Blob",
		"body": "Blob(\"${1:Blob Hash}\")"
	},
	"Expression": {
		"scope": "scope.rtm",
		"prefix": "Expression",
		"body": "Expression(\"${1|ENTIRE_WORKTOP,ENTIRE_AUTH_ZONE|}\")"
	},
	"Hash": {
		"scope": "scope.rtm",
		"prefix": "Hash",
		"body": "Hash(\"${1:Hash Hex}\")"
	},
	"NonFungibleAddress": {
		"scope": "scope.rtm",
		"prefix": "NonFungibleAddress",
		"body": "NonFungibleAddress(\"${1:Resource Address}\", ${2:Non-Fungible Id})"
	},
	"NonFungibleId": {
		"scope": "scope.rtm",
		"prefix": "NonFungibleId",
		"body": "NonFungibleId(${1:NonFungibleId})"
	},
	"Bucket": {
		"scope": "scope.rtm",
		"prefix": "Bucket",
		"body": "Bucket(\"${1:Bucket Name}\")"
	},
	"Proof": {
		"scope": "scope.rtm",
		"prefix": "Proof",
		"body": "Proof(\"${1:Proof Name}\")"
	},
	"ResourceAddress": {
		"scope": "scope.rtm",
		"prefix": "ResourceAddress",
		"body": "Address(\"${1:Resource Address}\")"
	},
	"ComponentAddress": {
		"scope": "scope.rtm",
		"prefix": "ComponentAddress",
		"body": "Address(\"${1:Component Address}\")"
	},
	"PackageAddress": {
		"scope": "scope.rtm",
		"prefix": "PackageAddress",
		"body": "Address(\"${1:Package Address}\")"
	},
	"Decimal": {
		"scope": "scope.rtm",
		"prefix": "Decimal",
		"body": "Decimal(\"${1:number}\")"
	},
	"PreciseDecimal": {
		"scope": "scope.rtm",
		"prefix": "PreciseDecimal",
		"body": "PreciseDecimal(\"${1:number}\")"
	},
	"Tuple": {
		"scope": "scope.rtm",
		"prefix": "Tuple",
		"body": "Tuple($2)"
	},
	"Array": {
		"scope": "scope.rtm",
		"prefix": "Array",
		"body": "Array<${1|I8,I16,I32,I64,I128,U8,U16,U32,U64,U128,Decimal,PreciseDecimal,String,Struct,Enum,Option,Some,None,Ok,Err,Array,Tuple,List,Set,Map,ComponentAddress,PackageAddress,ResourceAddress,Hash,Bucket,Proof,NonFungibleId,NonFungibleAddress,Bytes|}>($2)"
	},
	"Enum": {
		"scope": "scope.rtm",
		"prefix": "Enum",
		"body": "Enum(\"${1:Variant Name}\", \"${2:Optional Values}\")"
	},
	"Vault": {
		"scope": "scope.rtm",
		"prefix": "Vault",
		"body": "Vault(\"${1:Vault Id}\")"
	},
	"Component": {
		"scope": "scope.rtm",
		"prefix": "Component",
		"body": "Component(\"${1:Component Id}\")"
	},
	"KeyValueStore": {
		"scope": "scope.rtm",
		"prefix": "KeyValueStore",
		"body": "KeyValueStore(\"${1:KeyValueStore Id}\")"
	},
	"Bytes": {
		"scope": "scope.rtm",
		"prefix": "Bytes",
		"body": "Bytes(\"${1:Bytes Hex}\")"
	},
	"EcdsaSecp256k1PublicKey": {
		"scope": "scope.rtm",
		"prefix": "EcdsaSecp256k1PublicKey",
		"body": "EcdsaSecp256k1PublicKey(\"${1:Ecdsa Secp256k1 Public Key}\")"
	},
	"EcdsaSecp256k1Signature": {
		"scope": "scope.rtm",
		"prefix": "EcdsaSecp256k1Signature",
		"body": "EcdsaSecp256k1Signature(\"${1:Ecdsa Secp256k1 Signature}\")"
	},
	"EddsaEd25519PublicKey": {
		"scope": "scope.rtm",
		"prefix": "EddsaEd25519PublicKey",
		"body": "EddsaEd25519PublicKey(\"${1:Eddsa Ed25519 Public Key}\")"
	},
	"EddsaEd25519Signature": {
		"scope": "scope.rtm",
		"prefix": "EddsaEd25519Signature",
		"body": "EddsaEd25519Signature(\"${1:Eddsa Ed25519 Signature}\")"
	},
	// =================
	// Useful Constants
	// =================
	"XRD": {
		"scope": "scope.rtm",
		"prefix": "XRD",
		"body": "resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag"
	},
	"System Component": {
		"scope": "scope.rtm",
		"prefix": "SYSTEM_COMPONENT",
		"body": "component_sim1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqgyhcl2"
	}
}