{
  "InstructionSnippets": {
    "Allocate Global Address": {
      "scope": "scope.rtm",
      "prefix": "ALLOCATE_GLOBAL_ADDRESS",
      "body": "ALLOCATE_GLOBAL_ADDRESS\n\tAddress(\"$1\")\n\t\"${2:Blueprint_Name}\"\n\tAddressReservation(\"${3:address_reservation}\")\n\tNamedAddress(\"${4:address}\")\n;",
      "description": "Allocate a global address."
    },
    "Assert Worktop Contains": {
      "scope": "scope.rtm",
      "prefix": "ASSERT_WORKTOP_CONTAINS",
      "body": "ASSERT_WORKTOP_CONTAINS\n\tAddress(\"$1\")\n;",
      "description": "Asserts that the transaction worktop contains some resource."
    },
    "Assert Worktop Contains by Amount": {
      "scope": "scope.rtm",
      "prefix": "ASSERT_WORKTOP_CONTAINS_BY_AMOUNT",
      "body": "ASSERT_WORKTOP_CONTAINS_BY_AMOUNT\n\tDecimal(\"${1:Amount}\")\n\tAddress(\"$2\")\n;",
      "description": "Asserts that the transaction worktop contains some resource."
    },
    "Assert Worktop Contains by Ids": {
      "scope": "scope.rtm",
      "prefix": "ASSERT_WORKTOP_CONTAINS_BY_IDS",
      "body": "ASSERT_WORKTOP_CONTAINS_BY_IDS\n\tSet<NonFungibleLocalId>(NonFungibleLocalId(\"${1:id}\"))\n\tAddress(\"$2\")\n;",
      "description": "Asserts that the transaction worktop contains some resource."
    },
    "Call Method": {
      "scope": "scope.rtm",
      "prefix": "CALL_METHOD",
      "body": "CALL_METHOD\n\tAddress(\"$1\")\n\t\"${2:Method_Name}\"\n\t\"${3:args}\"\n;",
      "description": "Calls a method on a component."
    },
    "Call Function": {
      "scope": "scope.rtm",
      "prefix": "CALL_FUNCTION",
      "body": "CALL_FUNCTION\n\tAddress(\"$1\")\n\t\"${2:Blueprint_Name}\"\n\t\"${3:Function_Name}\"\n\t\"${4:args}\"\n;",
      "description": "Calls a function on a blueprint."
    },
    "Take From Worktop": {
      "scope": "scope.rtm",
      "prefix": "TAKE_FROM_WORKTOP",
      "body": "TAKE_FROM_WORKTOP\n\tAddress(\"$1\")\n\tBucket(\"${2:Bucket_Name}\")\n;",
      "description": "Takes resources from the worktop and into a bucket."
    },
    "Take From Worktop by Amount": {
      "scope": "scope.rtm",
      "prefix": "TAKE_FROM_WORKTOP_BY_AMOUNT",
      "body": "TAKE_FROM_WORKTOP_BY_AMOUNT\n\tDecimal(\"${1:Amount}\")\n\tAddress(\"$2\")\n\tBucket(\"${3:Bucket_Name}\")\n;",
      "description": "Takes resources from the worktop and into a bucket."
    },
    "Take From Worktop by Ids": {
      "scope": "scope.rtm",
      "prefix": "TAKE_FROM_WORKTOP_BY_IDS",
      "body": "TAKE_FROM_WORKTOP_BY_IDS\n\tSet<NonFungibleLocalId>(NonFungibleLocalId(\"${1:id}\"))\n\tAddress(\"$2\")\n\tBucket(\"${3:Bucket_Name}\")\n;",
      "description": "Takes resources from the worktop and into a bucket."
    },
    "Return to Worktop": {
      "scope": "scope.rtm",
      "prefix": "RETURN_TO_WORKTOP",
      "body": "RETURN_TO_WORKTOP\n\tBucket(\"${1:Bucket_Name}\")\n;",
      "description": "Returns a bucket to the transaction worktop."
    },
    "Pop from Auth Zone": {
      "scope": "scope.rtm",
      "prefix": "POP_FROM_AUTH_ZONE",
      "body": "POP_FROM_AUTH_ZONE\n\tProof(\"${1:Proof_Name}\")\n;",
      "description": "Pops a proof from the Auth Zone."
    },
    "Push to Auth Zone": {
      "scope": "scope.rtm",
      "prefix": "PUSH_TO_AUTH_ZONE",
      "body": "PUSH_TO_AUTH_ZONE\n\tProof(\"${1:Proof_Name}\")\n;",
      "description": "Pushes a proof to the auth zone."
    },
    "Create Proof from Auth Zone": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_FROM_AUTH_ZONE",
      "body": "CREATE_PROOF_FROM_AUTH_ZONE\n\tAddress(\"$1\")\n\tProof(\"${2:Proof_Name}\")\n;",
      "description": "Creates a proof from the Auth Zone."
    },
    "Create Proof from Auth Zone by Amount": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT",
      "body": "CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT\n\tDecimal(\"${1:Amount}\")\n\tAddress(\"$2\")\n\tProof(\"${3:Proof_Name}\")\n;",
      "description": "Creates a proof from the Auth Zone."
    },
    "Create Proof from Auth Zone by Ids": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS",
      "body": "CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS\n\tSet<NonFungibleLocalId>(NonFungibleLocalId(\"${1:id}\"))\n\tAddress(\"$2\")\n\tProof(\"${3:Proof_Name}\")\n;",
      "description": "Creates a proof from the Auth Zone."
    },
    "Create Proof from Bucket": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_FROM_BUCKET",
      "body": "CREATE_PROOF_FROM_BUCKET\n\tBucket(\"${1:Bucket_Name}\")\n\tProof(\"${2:Proof_Name}\")\n;",
      "description": "Creates a proof from Bucket."
    },
    "Clone Proof": {
      "scope": "scope.rtm",
      "prefix": "CLONE_PROOF",
      "body": "CLONE_PROOF\n\tProof(\"${1:Original_Proof_Name}\")\n\tProof(\"${2:New_Proof_Name}\")\n;",
      "description": "Clones an existing proof."
    },
    "Drop Proof": {
      "scope": "scope.rtm",
      "prefix": "DROP_PROOF",
      "body": "DROP_PROOF\n\tProof(\"${1:Proof_Name}\")\n;",
      "description": "Drops a Proof."
    },
    "Drop All Proof": {
      "scope": "scope.rtm",
      "prefix": "DROP_ALL_PROOF",
      "body": "DROP_ALL_PROOF\n;",
      "description": "Drops all Proofs."
    },
    "Clear Auth Zone": {
      "scope": "scope.rtm",
      "prefix": "CLEAR_AUTH_ZONE",
      "body": "CLEAR_AUTH_ZONE\n;",
      "description": "Drops all proofs from the Auth Zone."
    },
    "Publish Package with Owner": {
      "scope": "scope.rtm",
      "prefix": "PUBLISH_PACKAGE_WITH_OWNER",
      "body": "PUBLISH_PACKAGE_WITH_OWNER\n\tBlob(\"${1:Package_WASM_Blob}\")\n\tBlob(\"${2:Package_ABI_Blob}\")\n\tNonFungibleGlobalId(\"${3:Owner_Resource_Address}\",\n\t${4:Owner_Non-Fungible_Id)\n;",
      "description": "Publishes a package."
    },
    "Mint Fungible": {
      "scope": "scope.rtm",
      "prefix": "MINT_FUNGIBLE",
      "body": "MINT_FUNGIBLE\n\tAddress(\"${1:Resource_Address}\")\n\tDecimal(\"${2:Amount}\")\n;",
      "description": "Mints a fungible token."
    },
    "Burn Bucket": {
      "scope": "scope.rtm",
      "prefix": "BURN_BUCKET",
      "body": "BURN_BUCKET\n\tBucket(\"${1:Bucket_Name}\")\n;",
      "description": "Burns a Bucket."
    },
    "Create Resource": {
      "scope": "scope.rtm",
      "prefix": "CREATE_RESOURCE",
      "body": "CREATE_RESOURCE\n\tEnum(\"Fungible\", ${1:Token_Divisibility}u8)\n\tMap<String, String>(\n\t\tString(\"name\"),\n\t\tString(\"${2:Token_Name}\")\n\t)\n\tMap<Enum, Tuple>(\n\t\tEnum(\"Withdraw\"),\n\t\tTuple(Enum(\"AllowAll\"), Enum(\"LOCKED\"))\n\t)\n\tSome(\n\t\tEnum(\"Fungible\", Decimal(\"${3:Initial_Supply}\"))\n\t)\n;",
      "description": "Creates a new resource."
    }
  },

  "CommonOperations": {
    "Lock Fee": {
      "scope": "scope.rtm",
      "prefix": "LOCK_FEE",
      "body": "CALL_METHOD\n\tAddress(\"${1:Account_Component}\")\n\t\"lock_fee\"\n\tDecimal(\"${2:Fee_to_Lock}\")\n;",
      "description": "Locks a fee for the transaction."
    },
    "Withdraw from Account": {
      "scope": "scope.rtm",
      "prefix": "WITHDRAW_FROM_ACCOUNT",
      "body": "CALL_METHOD\n\tAddress(\"${1:Account_Component}\")\n\t\"withdraw\"\n\tAddress(\"${2:Resource_to_Withdraw}\")\n\tDecimal(\"${3:Amount}\"))\n;",
      "description": "Withdraws funds from an account."
    },
    "Withdraw Non Fungibles from Account by Ids": {
      "scope": "scope.rtm",
      "prefix": "WITHDRAW_NON_FUNGIBLES_FROM_ACCOUNT",
      "body": "CALL_METHOD\n\tAddress(\"${1:Account_Component}\")\n\t\"withdraw_non_fungibles\"\n\tAddress(\"${2:Resource_to_Withdraw}\")\n\tArray<NonFungibleLocalId>(NonFungibleLocalId(\"${3:id}\"))\n;",
      "description": "Withdraws funds from an account."
    },
    "Create Proof of Amount from Account": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_OF_AMOUNT_FROM_ACCOUNT",
      "body": "CALL_METHOD\n\tAddress(\"${1:account_component_address}\")\n\t\"create_proof_of_amount\"\n\tAddress(\"${2:resource_address}\")\n\tDecimal(\"${3:amount}\")\n;",
      "description": "Creates a proof from an account."
    },
    "Create Proof of Non Fungibles from Account": {
      "scope": "scope.rtm",
      "prefix": "CREATE_PROOF_OF_NON_FUNGIBLES_FROM_ACCOUNT",
      "body": "CALL_METHOD\n\tAddress(\"${1:account_component_address}\")\n\t\"create_proof_of_non_fungibles\"\n\tAddress(\"${2:resource_address}\")\n\tArray<NonFungibleLocalId>(NonFungibleLocalId(\"${3:some_non_fungible_local_id}\"))\n;",
      "description": "Creates a proof of non fungibles from an account."
    }
  },

  "CommonTypes": {
    "Blob": {
      "scope": "scope.rtm",
      "prefix": "Blob",
      "body": "Blob(\"${1:Blob_Hash}\")"
    },
    "Expression": {
      "scope": "scope.rtm",
      "prefix": "Expression",
      "body": "Expression(\"${1|ENTIRE_WORKTOP,ENTIRE_AUTH_ZONE|}\")"
    },
    "Hash": {
      "scope": "scope.rtm",
      "prefix": "Hash",
      "body": "Hash(\"${1:Hash_Hex}\")"
    },
    "NonFungibleGlobalId": {
      "scope": "scope.rtm",
      "prefix": "NonFungibleGlobalId",
      "body": "NonFungibleGlobalId(\"${1:Resource_Address}:${2:NonFungibleLocalId}\")"
    },
    "NonFungibleLocalId": {
      "scope": "scope.rtm",
      "prefix": "NonFungibleLocalId",
      "body": "NonFungibleLocalId(\"${1:NonFungibleLocalId}\")"
    },
    "Bucket": {
      "scope": "scope.rtm",
      "prefix": "Bucket",
      "body": "Bucket(\"${1:Bucket_Name}\")"
    },
    "Proof": {
      "scope": "scope.rtm",
      "prefix": "Proof",
      "body": "Proof(\"${1:Proof_Name}\")"
    },
    "ResourceAddress": {
      "scope": "scope.rtm",
      "prefix": "ResourceAddress",
      "body": "Address(\"${1:Resource_Address}\")"
    },
    "ComponentAddress": {
      "scope": "scope.rtm",
      "prefix": "ComponentAddress",
      "body": "Address(\"${1:Component_Address}\")"
    },
    "PackageAddress": {
      "scope": "scope.rtm",
      "prefix": "PackageAddress",
      "body": "Address(\"${1:Package_Address}\")"
    },
    "Decimal": {
      "scope": "scope.rtm",
      "prefix": "Decimal",
      "body": "Decimal(\"${1:number}\")"
    },
    "PreciseDecimal": {
      "scope": "scope.rtm",
      "prefix": "PreciseDecimal",
      "body": "PreciseDecimal(\"${1:number}\")"
    },
    "Tuple": {
      "scope": "scope.rtm",
      "prefix": "Tuple",
      "body": "Tuple($2)"
    },
    "Array": {
      "scope": "scope.rtm",
      "prefix": "Array",
      "body": "Array<${1|I8,I16,I32,I64,I128,U8,U16,U32,U64,U128,Decimal,PreciseDecimal,String,Struct,Enum,Option,Some,None,Ok,Err,Array,Tuple,List,Set,Map,ComponentAddress,PackageAddress,ResourceAddress,Hash,Bucket,Proof,NonFungibleLocalId,NonFungibleGlobalId,Bytes|}>($2)"
    },
    "Enum": {
      "scope": "scope.rtm",
      "prefix": "Enum",
      "body": "Enum(\"${1:Variant_Name}\", \"${2:Optional_Values}\")"
    },
    "Vault": {
      "scope": "scope.rtm",
      "prefix": "Vault",
      "body": "Vault(\"${1:Vault_Id}\")"
    },
    "Component": {
      "scope": "scope.rtm",
      "prefix": "Component",
      "body": "Component(\"${1:Component_Id}\")"
    },
    "KeyValueStore": {
      "scope": "scope.rtm",
      "prefix": "KeyValueStore",
      "body": "KeyValueStore(\"${1:KeyValueStore_Id}\")"
    },
    "Bytes": {
      "scope": "scope.rtm",
      "prefix": "Bytes",
      "body": "Bytes(\"${1:Bytes_Hex}\")"
    },
    "EcdsaSecp256k1PublicKey": {
      "scope": "scope.rtm",
      "prefix": "EcdsaSecp256k1PublicKey",
      "body": "EcdsaSecp256k1PublicKey(\"${1:Ecdsa_Secp256k1_Public_Key}\")"
    },
    "EcdsaSecp256k1Signature": {
      "scope": "scope.rtm",
      "prefix": "EcdsaSecp256k1Signature",
      "body": "EcdsaSecp256k1Signature(\"${1:Ecdsa_Secp256k1_Signature}\")"
    },
    "EddsaEd25519PublicKey": {
      "scope": "scope.rtm",
      "prefix": "EddsaEd25519PublicKey",
      "body": "EddsaEd25519PublicKey(\"${1:Eddsa_Ed25519_Public_Key}\")"
    },
    "EddsaEd25519Signature": {
      "scope": "scope.rtm",
      "prefix": "EddsaEd25519Signature",
      "body": "EddsaEd25519Signature(\"${1:Eddsa_Ed25519_Signature}\")"
    }
  },

  "UsefulConstants": {
    "XRD": {
      "scope": "scope.rtm",
      "prefix": "XRD",
      "body": "resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag"
    },
    "System Component": {
      "scope": "scope.rtm",
      "prefix": "SYSTEM_COMPONENT",
      "body": "component_sim1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqgyhcl2"
    }
  }
}
